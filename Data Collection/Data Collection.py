# -*- coding: utf-8 -*-
"""
Created on Wed Apr 10 17:10:04 2024

@author: ZiedKEBIR
"""

"""
The configuration file would look like this (sans those // comments):

{
    "note": "You configure either the authority setting when you are using Entra ID or External ID, or the oidc_authority setting when you are using External ID with its custom domain. Change the other one to null",
    "authority": "https://login.microsoftonline.com/Enter_the_Tenant_Name_Here",
    "oidc_authority": "https://login.contoso.com/Enter_the_Tenant_Name_Here/v2.0",
    "client_id": "your_client_id",
    "scope": ["https://graph.microsoft.com/.default"],
        // For more information about scopes for an app, refer:
        // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate"

    "secret": "The secret generated by AAD during your confidential app registration",
        // For information about generating client secret, refer:
        // https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Client-Credentials#registering-client-secrets-using-the-application-registration-portal

    "endpoint": "https://graph.microsoft.com/v1.0/users"

}

You can then run this sample with a JSON configuration file:

    python sample.py parameters.json
"""

import sys  # For simplicity, we'll read config file from 1st CLI param sys.argv[1]
import json
import logging

import requests
import msal

import os
import pandas as pd
import copy
import time

os. chdir('C:/Users/ZiedKEBIR/OneDrive - Actinvision/Bureau/Master Thesis/ms-identity-python-daemon-master/ms-identity-python-daemon-master/1-Call-MsGraph-WithSecret')



# Optional logging
# logging.basicConfig(level=logging.DEBUG)
f = open('parameters.json')


config = json.load(f)

config["client_id"]


config.get("authority")

#config = json.load(open(sys.argv[1]))

# Create a preferably long-lived app instance which maintains a token cache.
app = msal.ConfidentialClientApplication(
    client_id=config["client_id"], authority="...",
    client_credential=config["secret"],
    )

# The pattern to acquire a token looks like this.
result = None

# Firstly, looks up a token from cache
# Since we are looking for token for the current app, NOT for an end user,
# notice we give account parameter as None.
result = app.acquire_token_silent(config["scope"], account=None)



if not result:
    logging.info("No suitable token exists in cache. Let's get a new one from AAD.")
    result = app.acquire_token_for_client(scopes=config["scope"])
    print(result)
    

def create_token():
    global result

    config.get("authority")

    #config = json.load(open(sys.argv[1]))

    # Create a preferably long-lived app instance which maintains a token cache.
    app = msal.ConfidentialClientApplication(
        client_id=config["client_id"], authority="...",
        client_credential=config["secret"],
        )

    # The pattern to acquire a token looks like this.
    result = None

    # Firstly, looks up a token from cache
    # Since we are looking for token for the current app, NOT for an end user,
    # notice we give account parameter as None.
    result = app.acquire_token_silent(scopes=config["scope"], account=None)

    if not result:
        logging.info("No suitable token exists in cache. Let's get a new one from AAD.")
        result = app.acquire_token_for_client(scopes=config["scope"])
        print(result)
    

create_token()

"""    
#Extract user messages  
if "access_token" in result:
    # Calling graph using the access token
    chats_data = requests.get(  # Use token to call downstream service
                              
                              
        url = "https://graph.microsoft.com/v1.0/users/fd042edd-c743-4d5f-90ba-cf10bf636063/chats?$expand=members",
        headers={'Authorization': 'Bearer ' + result['access_token']}).json()
    print("Graph API call result: ")
    print(chats_data)  
"""




   ## GET ALL USERS
if "access_token" in result:
    headers = {'Authorization': 'Bearer ' + result['access_token']}
    users_data = []
    # Initial request to get the first page of users
    url = "https://graph.microsoft.com/v1.0/users?$top=100"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        users_data.extend(response.json().get('value', []))
        while '@odata.nextLink' in response.json():
            next_link = response.json()['@odata.nextLink']
            response = requests.get(next_link, headers=headers)
            if response.status_code == 200:
                users_data.extend(response.json().get('value', []))
            else:
                print("Error fetching next page:", response.status_code)
    else:
        print("Error fetching users:", response.status_code)
    
    print("Graph API call result:")
    print(users_data)
    
    
users = pd.DataFrame(users_data)
users.to_excel("Actinvision_users_all.xlsx")



def extract_relevant_user_data(chat_list,user_id):
    chat_data_dict = dict()
    chat_data_list = list()
    for chat_log in chat_list['value']:
        if chat_log['chatType'] == 'oneOnOne':
            chat_data_dict['user_id'] = user_id
            chat_data_dict ['createdDateTime'] = chat_log['createdDateTime'] 
            chat_data_dict['chat_id'] = chat_log['id']
            chat_data_dict['tenantId'] = chat_log['tenantId']
            chat_data_dict['link_id'] = chat_log['members'][0]['id']
            chat_data_dict['name_user_1'] = chat_log['members'][0]['displayName']
            chat_data_dict['id_user_1'] = chat_log['members'][0]['userId']
            try:
                chat_data_dict['name_user_2'] = chat_log['members'][1]['displayName']
                chat_data_dict['id_user_2'] = chat_log['members'][1]['userId']
            except:
                pass
            d = copy.copy(chat_data_dict)
            chat_data_list.append(d)
    return chat_data_list

    
filtered_df = users[users['mail'].str.contains('actinvision.com', case=False)]



def extract_one_user_chat_logs(user_id:str):
    if "access_token" in result:
        headers = {'Authorization': 'Bearer ' + result['access_token']}
        chat_data = []
        chat_dict_list = []
        # Initial request to get the first page of users
        url = "https://graph.microsoft.com/v1.0/users/"+user_id+"/chats?$expand=members"
        response = requests.get(url, headers=headers)
    
        if response.status_code == 200:
            chat_dict_list = extract_relevant_user_data(response.json(),user_id)
            chat_data.extend(chat_dict_list)
            while '@odata.nextLink' in response.json():
                time.sleep(3)
                next_link = response.json()['@odata.nextLink']
                response = requests.get(next_link, headers=headers)
                if response.status_code == 200:
                    chat_dict_list = extract_relevant_user_data(response.json(),user_id)
                    chat_data.extend(chat_dict_list)
                else:
                    print("Error fetching next page:", response.status_code)
        else:
            print("Error fetching users:", response.status_code)
        #chat_data = [d.update({'user_id':user_id}) for d in chat_data]
        return chat_data
        
    


def extract_all_users_chat_logs(user_ids:list()):
    chats_data = list()
    count = 0
    for i in range(0,len(user_ids)):
        count+=1
        try:
            x = extract_one_user_chat_logs(str(user_ids[i]))
            print("x:",len(x))
            chats_data.extend(x)
            print(len(chat_data))
        except Exception:
            pass
        print(str(count)+'-Data of user with id:' + str(i) + ' extracted')
        print("progression rate= ", count/len(user_ids))
        df = pd.DataFrame(chats_data)
        df.to_excel('Log_data_3.xlsx')
        
    return chats_data



user_ids = list(filtered_df['id'])


exception_errors = list()
count = 10
for i in range(0,len(user_ids)):
    time.sleep(2)
    count+=1
    try:
        x = extract_one_user_chat_logs(str(user_ids[i]))
        print("x:",len(x))
        chats_data.extend(x)
        print(len(chats_data))
    except:
        print('exception error for id: ', user_ids[i])
        exception_errors.append(user_ids[i])
        pass
    print(str(count)+'-Data of user with id:' + user_ids[i] + ' extracted')
    print("progression rate= ", count/len(user_ids))
    #df = pd.DataFrame(chats_data)
    #df.to_excel('C:/Users/ZiedKEBIR/OneDrive - Actinvision/Master Thesis/ms-identity-python-daemon-master/ms-identity-python-daemon-master/1-Call-MsGraph-WithSecret/Log_data_3.xlsx')
        

df = pd.DataFrame(chats_data)
df.to_excel('Log_data.xlsx')
    


df = pd.read_excel('Log_data.xlsx')



#Extract all chat ids: 
chat_ids = list(set(df['chat_id']))    


############################ Extract the messages sent between two individuals ################
    
#Extract user messages  


def extract_relevant_chat_data(chat_list:dict,chat_id):
    chat_data_dict = dict()
    chat_data_list = list()
    for chat_log in chat_list['value']:
        chat_data_dict['chat_id'] = chat_id
        try:
            chat_data_dict['message_content'] =chat_log['message_content']
        except:
            chat_data_dict['message_content'] = ''
            
        try:
            chat_data_dict ['createdDateTime'] = chat_log['createdDateTime'] 

        except:
            chat_data_dict ['createdDateTime'] = ''

        try:
            chat_data_dict ['deletedDateTime'] = chat_log['deletedDateTime'] 
 
        except:
            chat_data_dict ['deletedDateTime'] = ''

          
        try:
            chat_data_dict ['deletedDateTime'] = chat_log['deletedDateTime'] 
        except: 
            chat_data_dict ['deletedDateTime'] = ''
            
        try:
            chat_data_dict ['deletedDateTime'] = chat_log['deletedDateTime'] 
        except:
            chat_data_dict ['deletedDateTime']=''
            

        try:
            chat_data_dict ['lastEditedDateTime'] = chat_log['lastEditedDateTime'] 
        except:
            chat_data_dict ['lastEditedDateTime']=''
        

        try:
            chat_data_dict ['lastModifiedDateTime'] = chat_log['lastModifiedDateTime'] 
        except:
            chat_data_dict ['lastModifiedDateTime'] =''
        
        try:
            chat_data_dict ['message_sender_name'] = chat_log['from']['user']['displayName']
        except:
            chat_data_dict ['message_sender_name']=''
                
            
        try:
            chat_data_dict ['message_sender_id'] = chat_log['from']['user']['id']
        except:
            chat_data_dict ['message_sender_id'] = ''

        
        d = copy.copy(chat_data_dict)
        chat_data_list.append(d)
    return chat_data_list



def extract_one_chat_logs(chat_id:str):
    if "access_token" in result:
        headers = {'Authorization': 'Bearer ' + result['access_token']}
        chat_data = []
        chat_dict_list = []
        # Initial request to get the first page of users
        url = "https://graph.microsoft.com/v1.0/chats/"+chat_id+"/messages"
        response = requests.get(url, headers=headers)
        print(len(response.json()))
    
        if response.status_code == 200:
            chat_dict_list = extract_relevant_chat_data(response.json(),chat_id)
            chat_data.extend(chat_dict_list)
            while '@odata.nextLink' in response.json():
                #print('occurence')
                next_link = response.json()['@odata.nextLink']
                time.sleep(1)

                response = requests.get(next_link, headers=headers)
                if response.status_code == 200:
                    chat_dict_list = extract_relevant_chat_data(response.json(),chat_id)
                    chat_data.extend(chat_dict_list)
                else:
                    print("Error fetching next page:", response.status_code)
        else:
            print("Error fetching users:", response.status_code)

        #chat_data = [d.update({'user_id':user_id}) for d in chat_data]
        return chat_data,response.status_code
        #return chat_data


def extract_all_users_chat_messages(chat_ids):
    chats_data = []
    total_chats = len(chat_ids)
    
    for count, chat_id in enumerate(chat_ids, start=1):
        time.sleep(5)
        try:
            x = extract_one_chat_logs(chat_id)
            print(str(count)+'-'+str(len(x)))
            chats_data.extend(x)
            print(f"Data of chat with id: {chat_id} extracted ({count}/{total_chats})")
        except Exception as e:
            print(f"Error extracting data of chat with id: {chat_id} - {e}")
    
        df = pd.DataFrame(chats_data)
        df.to_excel('C:/Users/ZiedKEBIR/OneDrive - Actinvision/Bureau/Master Thesis/ms-identity-python-daemon-master/ms-identity-python-daemon-master/1-Call-MsGraph-WithSecret/all_chat_messages.xlsx', index=False)
        print("DataFrame saved to Excel file.")
    return chats_data


df = pd.read_excel('Log_data.xlsx')

#Extract all chat ids: 
chat_ids = list(set(df['chat_id']))    





#chats_data = []
total_chats = len(chat_ids)


iteration_checker = 0
count = 0
while count <= total_chats:
    try:
        x = extract_one_chat_logs(chat_ids[count])
        if x[1]==200:
            print(str(count)+'-'+str(len(x[0])))
            chats_data.extend(x[0])
            print("length of the chats data list: ", len(chats_data))
            print(f"Data of chat with id: {chat_ids[count]} extracted ({count}/{2748})")
        else:  
            #Sometimes it is required to ask for the token again mid data collection process
            if iteration_checker == 0 :
                create_token()
                count=count-1
                iteration_checker = 1
            else:
                create_token()
                iteration_checker = 0
                
    except Exception as e:
        print(f"Error extracting data of chat with id: {chat_ids[count]} - {e}")
    
    df2 = pd.DataFrame(chats_data)
    df2.to_excel('all_chat_messages.xlsx', index=False)
    time.sleep(5)
    count+=1
    print("DataFrame saved to Excel file.")
    